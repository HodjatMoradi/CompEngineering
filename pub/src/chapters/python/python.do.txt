======= Introduction to Python programming  =======
This chapter is not meant as a full introduction to Python
programming. We will assume that you have some knowledge of
programming, and focus on the things that will be of most use in this
course. One of the great things with Python is that there is a wealth
of information and introductory courses freely available on the web.
Most of the time you can simply type a question into the web browser,
and there is a high chance that someone has asked it before you. The "stackoverflow":"https://stackoverflow.com/"
is particularly useful, the answers to questions are voted and the
most helpful solution is at the top.

Useful python course "python":"https://www.python-course.eu/recursive_functions.php"
===== Types in Python =====

===== Functions in Python =====
When to use functions? There is no particular rule, *but whenever you
start to copy and paste code from one place to another, you should
consider to use a function*. Functions makes the code easier to read.
It is not easy to identify which part of a program is a good candidate
for a function, it requires skill and experience. Most likely you will
end up changing the function definitions as your program develops.
===== Example: Defining a mathematical function =====
##label{}
##file=solution.pdf
The following function describes the fluid potential, $\Phi$, from a vertical well
that inject or produce a fluid from a homogeneous reservoir with
thickness $h$:
!bt
\begin{equation}
\Phi_\text{well}=-\frac{Q}{2\pi h}\ln r,
label{eq:py:phi}
\end{equation}
!et
where $Q$ is the injection rate (volume of fluid per time), and $r$ is
the radial distance from the well.

Write a Python function that returns the fluid potential for any value
of $r$, $h$, and $Q$. 

# !bsol
# !esol

# !bsubex
# subexercise...

# !bsol
# !esol
# !esubex

Tips for python programming
## o use of __main__ if __name__ == '__main__':
o "Use of underscore":"https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc"
o get index in loop: for idx,item in enumerate(list):
o default argument list
o profiling: timeit 
!bc pycod
# test out the following two codes
t=[0.,0.,0.,0.,0.]
for i in range(10):
	pidmm.append(t)

for i in range(10):
	pidmm.append([0.,0.,0.,0.,0.])
!ec
